import argparse
import base64
import os
from string import ascii_lowercase, ascii_letters, printable, punctuation

parser = argparse.ArgumentParser(description='Challenge 19: Crack encryption with AES-128-CTR, but with fixed nonce')
parser.add_argument("-f", "--filename", help="File with plaintext or ciphertext", required=True, action="store")
args=parser.parse_args()

args.nonce=0

sBox=[
	0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
]

mul2=[
	0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
	0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
	0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
	0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
	0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
	0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
	0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
	0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
	0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
	0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
	0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
	0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
	0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
	0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
	0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
	0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
]

mul3=[
	0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
	0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
	0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
	0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
	0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
	0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
	0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
	0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
	0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
	0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
	0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
	0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
	0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
	0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
	0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
	0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
]

rcon=[0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]

frequencies = {
	'a':0.08167,	
	'b':0.01492,
	'c':0.02782,	
 	'd':0.04253,	
	'e':0.12702,	
	'f':0.02228,	
 	'g':0.02015,	
 	'h':0.06094,	
 	'i':0.06966,	
 	'j':0.00153,	
 	'k':0.00772,	
 	'l':0.04025,	
 	'm':0.02406,	
 	'n':0.06749,	
 	'o':0.07507,	
 	'p':0.01929,	
 	'q':0.00095,	
 	'r':0.05987,	
 	's':0.06327,	
	't':0.09056,	
 	'u':0.02758,	
	'v':0.00978,	
	'w':0.02360,	
 	'x':0.00150,	
	'y':0.01974,	
	'z':0.00074	
}

def bytesub(matrix):
	for i in range(0, 4):
		for j in range(0, 4):
			matrix[i][j]=sBox[matrix[i][j]]
	return matrix

def shiftRows(matrix):
	#firstrow
	tmp=matrix[1][0]
	matrix[1][0]=matrix[1][1]
	matrix[1][1]=matrix[1][2]
	matrix[1][2]=matrix[1][3]
	matrix[1][3]=tmp
	#third row
	tmp1=matrix[2][0]
	tmp2=matrix[2][1]
	matrix[2][0]=matrix[2][2]
	matrix[2][1]=matrix[2][3]
	matrix[2][2]=tmp1
	matrix[2][3]=tmp2
	#third row
	tmp1=matrix[3][0]
	tmp2=matrix[3][1]
	tmp3=matrix[3][2]
	matrix[3][0]=matrix[3][3]
	matrix[3][1]=tmp1
	matrix[3][2]=tmp2
	matrix[3][3]=tmp3
	return matrix

def mixColumns(array):
	result=[0,0,0,0]
	result[0]=mul2[array[0]]^mul3[array[1]]^array[2]^array[3]
	result[1]=array[0]^mul2[array[1]]^mul3[array[2]]^array[3]
	result[2]=array[0]^array[1]^mul2[array[2]]^mul3[array[3]]
	result[3]=mul3[array[0]]^array[1]^array[2]^mul2[array[3]]
	return result

def addRoundKey(matrix, key):
	for i in range(0,4):
		for j in range(0,4):
			matrix[i][j]=matrix[i][j]^key[i][j]
	return matrix

def rotate(array):
	tmp=array[0]
	array[0]=array[1]
	array[1]=array[2]
	array[2]=array[3]
	array[3]=tmp
	return array

def keyScheduleCore(array, rconiter):
	array=rotate(array)
	for i in range(0, 4):
		array[i]=sBox[array[i]]
	array[0]=array[0]^rcon[rconiter]
	return array

def xor4bytes(array1, array2):
	for i in range(0, 4):
		array1[i]=array1[i]^array2[i]
	return array1

def expandKey(key):
	expandedkey=key
	rconiter=1
	while len(expandedkey)<176:
		tmp=expandedkey[-4:]
		tmp=keyScheduleCore(tmp, rconiter)
		rconiter+=1
		expandedkey+=xor4bytes(tmp, expandedkey[-16:-12])

		for i in range(0,3):
			tmp=expandedkey[-4:]
			expandedkey+=xor4bytes(tmp, expandedkey[-16:-12])
	return expandedkey

def encryptBlock(block, expandedkey):
	output=[]
	matrix=[[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0]]

	for j in range(4):
		for k in range(4):
			matrix[j][k]=block[j+4*k]
	
	key=[[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0]]
	
	#first round
	expandedkeytmp=expandedkey[:16]
	for j in range(4):
		for k in range(4):
			key[j][k]=expandedkeytmp[j+4*k]
	matrix=addRoundKey(matrix, key)

	#nine rounds
	for n in range(1, 10):
		expandedkeytmp=expandedkey[n*16:(n+1)*16]
		for j in range(4):
			for k in range(4):
				key[j][k]=expandedkeytmp[j+4*k]
		matrix=bytesub(matrix)
		matrix=shiftRows(matrix)
		for j in range(4):
			tmp=[0,0,0,0]
			for k in range(4):
				tmp[k]=matrix[k][j]
			tmp=mixColumns(tmp)
			for k in range(4):
				matrix[k][j]=tmp[k]
		matrix=addRoundKey(matrix, key)
				
	#last round
	expandedkeytmp=expandedkey[-16:]
	for j in range(4):
		for k in range(4):
			key[j][k]=expandedkeytmp[j+4*k]
	matrix=bytesub(matrix)
	matrix=shiftRows(matrix)
	matrix=addRoundKey(matrix, key)
	#add to output
	for j in range(4):
		for k in range(4):
			output.append(matrix[k][j])
	return output

def CTR(text, expandedkey, nonce):
	nonce=nonce.to_bytes(8, 'little')
	counter=0
	output=[]
	ciphertext=[]
	while counter<=int(len(text)/16):
		toEncrypt=nonce+counter.to_bytes(8, 'little')
		ciphertext+=encryptBlock(toEncrypt, expandedkey)	
		counter+=1

	i=0
	while i<len(text):
		output.append(text[i]^ciphertext[i])
		i+=1
	return output

def rate(stringtorate):
	result=0
	for c in ascii_lowercase:
		count=0
		howManyLetters=0
		stringtorate=stringtorate.lower()
		for d in stringtorate:
			if d in ascii_letters or d in punctuation or d == ' ':
				howManyLetters+=1
				if d==c:
					count+=1
			else:
				return 1001
		result+=pow(frequencies[c]-(count/howManyLetters), 2)	
	return result

bkey=bytearray(os.urandom(16))
expandedkey=expandKey(bkey)

#Reading from file and b64 decoding
maxLength=0
file=open(args.filename)
result=[]
for line in file:
	bcontent=bytearray(base64.b64decode(line))
	if len(bcontent)>maxLength:
		maxLength=len(bcontent)
	result.append(bytearray(CTR(bcontent, expandedkey, args.nonce)))
file.close()

transposed=[]
for i in range(maxLength):
	line=[]
	for tab in result:
		if len(tab)>i:
			line.append(tab[i])
	transposed.append(line)

keyStream=[]
for line in transposed:
	bestByte=0
	bestScore=1000
	for i in range(256):
		xor=''
		for byte in line:
			xor+=chr(byte^i)
		currentRate=rate(xor)
		if(currentRate<bestScore):
			bestScore=currentRate
			bestByte=i
	keyStream.append(bestByte)

for line in result:
	decrypted=''
	for i in range(maxLength):
		if len(line)>i:
			decrypted+=chr(line[i]^keyStream[i])
	print(decrypted)